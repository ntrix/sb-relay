{"version":3,"file":"useId.f2d4825c.js","sources":["../../node_modules/@mui/utils/esm/createChainedFunction.js","../../node_modules/@mui/utils/esm/ownerDocument.js","../../node_modules/@mui/utils/esm/ownerWindow.js","../../node_modules/@mui/utils/esm/useId.js"],"sourcesContent":["/**\n * Safe chained function.\n *\n * Will only create a new function if needed,\n * otherwise will pass back existing functions or null.\n */\nexport default function createChainedFunction(...funcs) {\n  return funcs.reduce((acc, func) => {\n    if (func == null) {\n      return acc;\n    }\n\n    return function chainedFunction(...args) {\n      acc.apply(this, args);\n      func.apply(this, args);\n    };\n  }, () => {});\n}","export default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}","import ownerDocument from './ownerDocument';\nexport default function ownerWindow(node) {\n  const doc = ownerDocument(node);\n  return doc.defaultView || window;\n}","import * as React from 'react';\nlet globalId = 0;\n\nfunction useGlobalId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`mui-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\n\n\nconst maybeReactUseId = React['useId' + ''];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\n\nexport default function useId(idOverride) {\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  } // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n\n\n  return useGlobalId(idOverride);\n}"],"names":["createChainedFunction","funcs","acc","func","__name","args","ownerDocument","node","ownerWindow","globalId","useGlobalId","idOverride","defaultId","setDefaultId","React.useState","id","React.useEffect","maybeReactUseId","React","useId","reactId"],"mappings":"+HAMe,SAASA,KAAyBC,EAAO,CACtD,OAAOA,EAAM,OAAO,CAACC,EAAKC,IACpBA,GAAQ,KACHD,EAGFE,EAAA,YAA4BC,EAAM,CACvCH,EAAI,MAAM,KAAMG,CAAI,EACpBF,EAAK,MAAM,KAAME,CAAI,CAC3B,EAHW,mBAIN,IAAM,CAAE,CAAA,CACb,CAXwBD,EAAAJ,EAAA,yBCNT,SAASM,EAAcC,EAAM,CAC1C,OAAOA,GAAQA,EAAK,eAAiB,QACvC,CAFwBH,EAAAE,EAAA,iBCCT,SAASE,EAAYD,EAAM,CAExC,OADYD,EAAcC,CAAI,EACnB,aAAe,MAC5B,CAHwBH,EAAAI,EAAA,eCAxB,IAAIC,EAAW,EAEf,SAASC,EAAYC,EAAY,CAC/B,KAAM,CAACC,EAAWC,CAAY,EAAIC,EAAc,QAAA,SAACH,CAAU,EACrDI,EAAKJ,GAAcC,EACzBI,OAAAA,EAAAA,QAAAA,UAAgB,IAAM,CAChBJ,GAAa,OAKfH,GAAY,EACZI,EAAa,OAAOJ,GAAU,EAEpC,EAAK,CAACG,CAAS,CAAC,EACPG,CACT,CAdSX,EAAAM,EAAA,eAiBT,MAAMO,EAAkBC,EAAM,SAQf,SAASC,EAAMR,EAAY,CACxC,GAAIM,IAAoB,OAAW,CACjC,MAAMG,EAAUH,IAChB,OAAON,GAAc,KAAOA,EAAaS,CAC1C,CAGD,OAAOV,EAAYC,CAAU,CAC/B,CARwBP,EAAAe,EAAA"}