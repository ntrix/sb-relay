{"version":3,"file":"useId.dbdf2a5e.js","sources":["../../node_modules/@mui/utils/esm/useId/useId.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nlet globalId = 0;\nfunction useGlobalId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`mui-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n}\n\n// downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814\nconst maybeReactUseId = React['useId'.toString()];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\nexport default function useId(idOverride) {\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n  return useGlobalId(idOverride);\n}"],"names":["globalId","useGlobalId","idOverride","defaultId","setDefaultId","React.useState","id","React.useEffect","__name","maybeReactUseId","React","useId","reactId"],"mappings":"8HAGA,IAAIA,EAAW,EACf,SAASC,EAAYC,EAAY,CAC/B,KAAM,CAACC,EAAWC,CAAY,EAAIC,EAAc,QAAA,SAACH,CAAU,EACrDI,EAAKJ,GAAcC,EACzBI,OAAAA,EAAAA,QAAAA,UAAgB,IAAM,CAChBJ,GAAa,OAKfH,GAAY,EACZI,EAAa,OAAOJ,GAAU,EAEpC,EAAK,CAACG,CAAS,CAAC,EACPG,CACT,CAdSE,EAAAP,EAAA,eAiBT,MAAMQ,EAAkBC,EAAM,QAAQ,SAAU,GAOjC,SAASC,EAAMT,EAAY,CACxC,GAAIO,IAAoB,OAAW,CACjC,MAAMG,EAAUH,IAChB,OAAOP,GAAc,KAAOA,EAAaU,CAC1C,CAED,OAAOX,EAAYC,CAAU,CAC/B,CAPwBM,EAAAG,EAAA"}