{"version":3,"file":"useForkRef.65fd2ee2.js","sources":["../../node_modules/@mui/utils/esm/setRef.js","../../node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js","../../node_modules/@mui/utils/esm/useForkRef/useForkRef.js"],"sourcesContent":["/**\n * TODO v5: consider making it private\n *\n * passes {value} to {ref}\n *\n * WARNING: Be sure to only call this inside a callback that is passed as a ref.\n * Otherwise, make sure to cleanup the previous {ref} if it changes. See\n * https://github.com/mui/material-ui/issues/13539\n *\n * Useful if you want to expose the ref of an inner component to the public API\n * while still using it inside the component.\n * @param ref A ref callback or ref object. If anything falsy, this is a no-op.\n */\nexport default function setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}","import * as React from 'react';\nimport useEnhancedEffect from '../useEnhancedEffect';\n\n/**\n * https://github.com/facebook/react/issues/14099#issuecomment-440013892\n */\nexport default function useEventCallback(fn) {\n  const ref = React.useRef(fn);\n  useEnhancedEffect(() => {\n    ref.current = fn;\n  });\n  return React.useCallback((...args) =>\n  // @ts-expect-error hide `this`\n  // tslint:disable-next-line:ban-comma-operator\n  (0, ref.current)(...args), []);\n}","import * as React from 'react';\nimport setRef from '../setRef';\nexport default function useForkRef(...refs) {\n  /**\n   * This will create a new function if the refs passed to this hook change and are all defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior.\n   */\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return instance => {\n      refs.forEach(ref => {\n        setRef(ref, instance);\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}"],"names":["setRef","ref","value","__name","useEventCallback","fn","React.useRef","useEnhancedEffect","React.useCallback","args","useForkRef","refs","React.useMemo","instance"],"mappings":"iLAae,SAASA,EAAOC,EAAKC,EAAO,CACrC,OAAOD,GAAQ,WACjBA,EAAIC,CAAK,EACAD,IACTA,EAAI,QAAUC,EAElB,CANwBC,EAAAH,EAAA,UCPT,SAASI,EAAiBC,EAAI,CAC3C,MAAMJ,EAAMK,iBAAaD,CAAE,EAC3B,OAAAE,EAAkB,IAAM,CACtBN,EAAI,QAAUI,CAClB,CAAG,EACMG,EAAAA,QAAAA,YAAkB,IAAIC,OAGzBR,EAAI,SAAS,GAAGQ,CAAI,EAAG,CAAE,CAAA,CAC/B,CATwBN,EAAAC,EAAA,oBCJT,SAASM,KAAcC,EAAM,CAM1C,OAAOC,EAAa,QAAA,QAAC,IACfD,EAAK,MAAMV,GAAOA,GAAO,IAAI,EACxB,KAEFY,GAAY,CACjBF,EAAK,QAAQV,GAAO,CAClBD,EAAOC,EAAKY,CAAQ,CAC5B,CAAO,CACP,EAEKF,CAAI,CACT,CAjBwBR,EAAAO,EAAA"}